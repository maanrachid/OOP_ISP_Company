Script started on Sat Nov 17 17:51:40 2001
[haj@f431-02 cfiles]$ cat transaction.h
#ifndef _transaction_h
#define _transaction_h
#include "customerList.h"

const int  TTCOUNT = 4;
const char tab ='\t';
const int MAXEXTRA =100;
const int MINEXTRA=25;

enum Ttype {monthusecharge,extrafee,latecharge,payment};

class Transaction{
 public:
  Transaction(){}
  Transaction(Ttype);
  virtual ~Transaction(){};
  string gettcustomerid()const;
  Date gettdate()const;
  double gettamount()const;
  Ttype getTType()const;
  virtual void set(const CustomerList&);
  virtual void display(bool shortform=true) const;
  virtual void read(ifstream&);
  virtual void write(ofstream&)const;
  virtual Transaction* newTransaction()=0;
  virtual Transaction* clone() = 0;
  
 protected:
  virtual void setTransAmt(const CustomerList&)=0;
  void setAmt(double);
  void setttype(Ttype);

 private:
  string tcustomerid;
  Date tdate;
  Ttype type;
  double tamount;
  void settdate();
  void settcustomerid(const CustomerList&);

    

};

class TransactionFactory {
 public:
  static Transaction* create(const CustomerList&);      
  static Transaction* create(int tt);
  static Transaction* create(Transaction* trp);
  // silently constructs an object that is
  // a copy of the object at the given address.
  static string ttname[TTCOUNT] ;
  static void displayTTypes();


};




#endif















[haj@f431-02 cfiles]$ cat transaction.cc
#include "transaction.h"
#include "transMonthlyUse.h"
#include "transExtraFee.h"
#include "transLateFee.h"
#include "transPayment.h"


Transaction* TransactionFactory::create(Transaction* trp){
  if (trp==NULL) return NULL; 
  else return trp->clone();
}


Transaction* TransactionFactory::create(const CustomerList& cl){
  int temp;
  Transaction* tr;
  cout<<"Please enter the type of transaction:\n";
  TransactionFactory::displayTTypes();
  cout<<"Enter Transaction Type : ";
  temp=setInt();
  while((temp<monthusecharge)||(temp>payment)){
    cout<<"Please enter a correct choice\n";
    TransactionFactory::displayTTypes();
    cout<<"Enter Transaction Type : ";
    temp=setInt();
  }
  
  tr= create(temp);
  tr->set(cl);
  return tr;
}

Transaction* TransactionFactory::create(int tt){
  if (tt==monthusecharge)
      return new TransMonthlyUse(); 
  else if (tt==extrafee)
    return new TransExtraFee(); 
  else if (tt==latecharge)
    return new TransLateFee(); 
  else
    return new TransPayment(); 
  

}





void TransactionFactory::displayTTypes(){
  cout<<'0'<<tab<<"Monthly Use Charge\n";
  cout<<'1'<<tab<<"Extra Service Fee\n";
  cout<<'2'<<tab<<"Late Fee\n";
  cout<<'3'<<tab<<"Payment\n";

}


Transaction::Transaction(Ttype t1){
  setttype(t1);
}

void Transaction::setttype(Ttype t1){
  type=t1;
}

string  Transaction::gettcustomerid()const{
  return tcustomerid;
}

Date  Transaction::gettdate()const{
  return tdate;
}

Ttype Transaction::getTType()const{
  return type;
}
 
double Transaction::gettamount()const{
  return tamount;
}
  

void Transaction::set(const CustomerList& l1){
  settcustomerid(l1);
  settdate();
  
  
}

void  Transaction::display(bool shortform) const{
  cout<<tcustomerid<<tab<<tdate<<tab;
 
}

void  Transaction:: read(ifstream& f){
  f>>tcustomerid>>ws;
  tdate.read(f);
  
}
 
void  Transaction:: write(ofstream& f)const{
  f<<type<<endl;
  f<<tcustomerid<<endl;
  tdate.write(f);
}



void  Transaction::setAmt(double d1){
  tamount = d1;
}



void Transaction::settdate(){
  cout<<"Enter the transaction date. \n";
  tdate.set();
}

void Transaction::settcustomerid(const CustomerList& l1){
  string str,strid;
  cout<<"Enter the first few characters of the customer's name: ";
  getline(cin,str);
  strid=l1.findid(str);
  while(strid=="not found"){
    cout<<strid<<endl;
    cout<<"Enter the first few characters of the customer's name: ";
    getline(cin,str);
    strid=l1.findid(str);
  }
  tcustomerid=strid;

}
    
















[haj@f431-02 cfiles]$ cat traa nc sacti    MonthlyUse.h
#ifndef _transMonthlyUse_h
#define _transMonthlyUse_h
#include "transaction.h"

class TransMonthlyUse : public Transaction {
 public:
  TransMonthlyUse();
  virtual ~TransMonthlyUse(){}
  void set(const CustomerList&);
  void display(bool shortform=true)const;
  void write(ofstream&)const;
  void read(ifstream&);
  Date getstart()const;
  Date getend()const;
  TransMonthlyUse* newTransaction() {return new TransMonthlyUse;}
  TransMonthlyUse* clone() {return new TransMonthlyUse(*this);}





 private:
  Date start;
  Date end;
  void setTransAmt(const CustomerList&);
  void setstart();
  void setend();
};




#endif


[haj@f431-02 cfiles]$ cat trans  monthlyuse.cc
#include "transMonthlyUse.h"

TransMonthlyUse::TransMonthlyUse(){
  setttype(monthusecharge);
}



void TransMonthlyUse::set(const CustomerList& l1){
  Transaction::set(l1);
  setstart();
  setend();
  while (end<start){
    cout<<"Start date must be earlier than end date. Please try again.\n";
    setstart();
    setend();
  }
  setTransAmt(l1);
}

void TransMonthlyUse::display(bool shortform)const{
  Transaction::display();
  cout<<"Monthly Use Charge\t";
  moneyDisplay(Transaction::gettamount());
  cout<<endl;
  cout<<"Usage fee for period ";
  start.display();
  cout<<" - " ;
  end.display();
  cout<<": ";
  moneyDisplay(Transaction::gettamount());
  cout <<endl;
  
}

void TransMonthlyUse::write(ofstream& f)const{

  Transaction::write(f);
  f<<Transaction::gettamount()<<endl;
  start.write(f);
  end.write(f);
  
}

void TransMonthlyUse::read(ifstream& f){
  double d1;
  Transaction::read(f);
  f>>d1;
  Transaction::setAmt(d1);
  start.read(f);
  end.read(f);
}

Date TransMonthlyUse::getstart()const{
  return start;
}

Date TransMonthlyUse::getend()const{
  return end;
}

void TransMonthlyUse::setTransAmt(const CustomerList& l1){
  setAmt(l1[Transaction::gettcustomerid()].calculateCharges(start,end));

}

void TransMonthlyUse::setstart(){
  cout<<"Enter the start date of this billing period :";
  start.set();
}

void TransMonthlyUse::setend(){

  cout<<"Enter the end date for this billing period: ";
  end.set();

}





[haj@f431-02 cfiles]$ cat transExtraFee.h
#ifndef _transExtraFee_h
#define _transExtraFee_h

#include "transaction.h"

class TransExtraFee : public Transaction {
 public: 
  TransExtraFee();
  virtual ~TransExtraFee(){}
  void set(const CustomerList&);
  void read(ifstream&);
  void write(ofstream&)const;
  void display(bool shortform=true)const;
  string getdescription()const;
  Date getservicedate()const;
  TransExtraFee* newTransaction() {return new TransExtraFee;}
  TransExtraFee* clone() {return new TransExtraFee(*this);}
  
  
 private:
  Date servicedate;
  string description;
  void setservicedate();
  void setdescription();
  void setTransAmt(const CustomerList&);
  
};



#endif



[haj@f431-02 cfiles]$ cat transextrafee.h cc
#include "transExtraFee.h"

TransExtraFee::TransExtraFee(){
  setttype(extrafee);

}

void TransExtraFee::set(const CustomerList& l1){
  Transaction::set(l1);
  setTransAmt(l1);
  setservicedate();
  setdescription();
  
}

void TransExtraFee::read(ifstream& f){
  double d1;
  Transaction::read(f);
  f>>d1;
  Transaction::setAmt(d1);
  servicedate.read(f);
  f>>ws;
  getline(f,description);
  

}
void TransExtraFee::write(ofstream& f)const{
  Transaction::write(f);
  f<<Transaction::gettamount()<<endl;
  servicedate.write(f);
  f<<description<<endl;


}
void TransExtraFee::display(bool shortform)const{
  Transaction::display();
  cout<<"Extra Service Fee\t";
  moneyDisplay(Transaction::gettamount());
  cout<<endl;
  cout<<"Service Date: ";
  servicedate.display();
  cout<<endl;
  cout<<"Service Description: "<<description<<endl;
  
}
string TransExtraFee::getdescription()const{
  return description;

}
Date TransExtraFee::getservicedate()const{
  return servicedate;

}
void TransExtraFee::setservicedate(){
  cout<<"Enter the date of this extra service: ";
  servicedate.set();
}
  
void TransExtraFee::setdescription(){
  cout <<"Enter a brief description of the service:";
  getline(cin,description);

}

void TransExtraFee::setTransAmt(const CustomerList& l1){
  double d1;
  cout <<"Enter the charge for this extra service: ";
  d1=setReal();
  while((d1<MINEXTRA)||(d1>MAXEXTRA)){
    cout<<"Charge must be between $"<<MINEXTRA
	<<"and $"<<MAXEXTRA<<".please try again.\n";
    d1=setReal();
  }
  setAmt(d1);

}






[haj@f431-02 cfiles]$ cat transLe ateFee.h
#ifndef _transLateFee_h
#define _transLateFee_h
#include "transaction.h"

class TransLateFee : public Transaction {
 public:
  TransLateFee();
  virtual ~TransLateFee(){}
  void set(const CustomerList&);
  void display(bool shortform=true)const;
  void write(ofstream&)const;
  void read(ifstream&);
  Date getdue()const;
  double getlate()const;
  TransLateFee* newTransaction() {return new TransLateFee;}
  TransLateFee* clone() {return new TransLateFee(*this);}



 private:
  Date due;
  static double late ;
  void setTransAmt(const CustomerList&);
};


#endif









[haj@f431-02 cfiles]$ cat translatefee.cc
#include "transLateFee.h"

double TransLateFee::late=25;

TransLateFee::TransLateFee(){
  setttype(latecharge);

}

void TransLateFee::set(const CustomerList& l1){
  Transaction::set(l1);
  cout<<"Enter the due date :";
  due.set();
  cout<<"Transaction amout set to ";
  moneyDisplay(late);
  cout<<endl;

}
void TransLateFee::display(bool shortform)const{
  Transaction::display();
  cout<<"Late Fee\t";
  moneyDisplay(late);
  cout<<endl;
  cout<<"Due Date: ";
  due.display();
  cout<<tab<<"Late Fee:  ";
  moneyDisplay(late);
  cout<<endl ;

}

void TransLateFee::write(ofstream& f)const{
  Transaction::write(f);
  f<<Transaction::gettamount()<<endl;
  f<<late<<endl;
  due.write(f);
  
}

void TransLateFee::read(ifstream& f){
  double d1;
  Transaction::read(f);
  f>>d1;
  setAmt(d1);
  f>>late;
  due.read(f);

}
Date TransLateFee::getdue()const{
  return due;

}
double TransLateFee::getlate()const{
  return late;
}

void TransLateFee::setTransAmt(const CustomerList&){
  

}






[haj@f431-02 cfiles]$ cat transPayment.cc  h
#ifndef _transPayment_h
#define _transPayment_h
#include "transaction.h" 

class TransPayment : public Transaction {
 public:
  TransPayment();
  virtual ~TransPayment(){}
  void set(const CustomerList&);
  void display(bool shortform=true)const;
  void read(ifstream&);
  void write(ofstream&)const;
  TransPayment* newTransaction() {return new TransPayment;}
  TransPayment* clone() {return new TransPayment(*this);}




 private:
  void setTransAmt(const CustomerList&);
};


#endif 

[haj@f431-02 cfiles]$ cat transpayment.cc
#include "transPayment.h"

TransPayment::TransPayment(){
  setttype(payment);
}

void TransPayment::set(const CustomerList& l1){
  Transaction::set(l1);
  setTransAmt(l1);

}
void TransPayment::display(bool shortform)const{
  Transaction::display();
  cout<<"Payment amount: ";
  moneyDisplay(Transaction::gettamount());
  cout<<endl;

}

void TransPayment::read(ifstream& f){
  double d1;
  Transaction::read(f);
  f>>d1>>ws;
  setAmt(d1);
}

void TransPayment::write(ofstream& f)const{
  Transaction::write(f);
  f<<Transaction::gettamount()<<endl;

}


void TransPayment::setTransAmt(const CustomerList&){
  double d1;
  cout<<"Enter the payment amount: ";
  d1=setReal();
  cout<<"Transaction amount set to $"<<-d1<<endl;
  setAmt(-d1);
}





















[haj@f431-02 cfiles]$ cat customer.h
#ifndef _customer_h
#define _customer_h
#include "string"
#include "date.h"
#include <fstream.h>
#include "service.h"
#include "dsl.h"
#include "dialup.h"

class Customer {
 public:
  Customer(){serv = NULL;accountBalance=0;}    
  ~Customer(){delete serv;}
  Customer(const Customer& cus);
  
  
  Customer& operator=(const Customer& cus);
  void set();
  void display(bool shortform=true) const;
  void setCustomerId();
  string getCustomerId() const;
  void setPhone();
  string getPhone()const;
  void setName();
  string getName() const;
  void setAddress();
  string getAddress() const;
  void setAccountdate();
  Date getAccountdate() const;
  void setservice();
  void write(ofstream&)const;
  void read(ifstream&);
  double calculateCharges(Date,Date);
  double getaccountBalance();
  friend class CustomerList;
  
 private:
  string Id,phone,id,name,address;
  Date accountdate;
  Service* serv;
  double accountBalance;
};

#endif















[haj@f431-02 cfiles]$ cat customer.cc
/* this library will give a define to new class of type customer 
   that will allow the client to set each member of this class 
   alone or together by the function set .and also allow the clent to 
   access the members by the get functions or by the get function 
   to get all the data together.you also may write the data to a
   file and read the data from a file by the wrie and read functions*/




#include "customer.h"
#define seperater '\n'     /* define a seperater
			      between data in the file*/
const unsigned MAX =5;

void Customer::set(){
  setCustomerId();
  setName();
  setAddress();
  setPhone();
  setAccountdate();
  setservice();
}

double Customer::getaccountBalance(){
  return accountBalance;
}

double Customer::calculateCharges(Date d1,Date d2){
  return serv->calculateCharges(d1,d2);

}

Customer& Customer::operator=(const Customer& cus){
  if (this!=&cus){
    id = cus.id;
    name=cus.name;
    address=cus.address;
    phone=cus.phone;
    accountdate=cus.accountdate;
    accountBalance=cus.accountBalance;
    delete serv;
    if (cus.serv!=NULL){
      serv=(*(cus.serv)).clone();
    }else 
      serv=NULL;
  }
  return *this;
  

}

void Customer::setservice(){
  delete serv;
  serv = ServiceFactory::create();
}


 


Customer::Customer(const Customer& cus){
  /* this is not a shallow copy the assignment op will 
     take care of business */
  *this=cus;

}


void Customer::display(bool shortform) const{
  cout<<"Id ,Name: "<<id<<", "<<name<<endl;
  cout<<"Account Date:  ";
  accountdate.display(shortform);
  if (shortform==false){
    cout<<"\n";
    cout<<"Account Balance: ";
    moneyDisplay(accountBalance);
    cout<<seperater;
    cout<<"Address:  "<<address<<endl;
    cout<<"Phone: "<<phone<<endl;
    serv->display();
  }
  if (shortform) cout<<"\n";

}

void Customer::write(ofstream& f)const{
  f<<id<<seperater<<name; 
  f<<seperater;
  f<<address<<seperater;
  f<<phone<<seperater;
  accountdate.write(f);
  serv->write(f);

}



void Customer::read(ifstream& f){
  int m;

  getline(f,id);
  getline(f,name);
  getline(f,address);
  getline(f,phone);
  accountdate.read(f);
  f>>m;
  delete serv;
  serv=ServiceFactory::create(m);
  serv->read(f);
}



void Customer::setCustomerId(){
  
  string temp;
  cout<<"Customer Id: ";
  getline(cin,temp);
  while((temp.length()!=MAX)){
    cout<<"Customer Id must be exactly 5 letter : ";
    getline(cin,temp);
  }
  id=temp;
}
string Customer::getCustomerId() const{
  return id;
}

void Customer::setPhone(){
  cout<<"Customer phone: ";
  phone=setPhoneString();
}


string Customer::getPhone() const{
  return phone;
}



void Customer::setName(){
  string temp;
  cout<<"Customer Name: ";
  getline(cin,temp);
  while(temp.length()<1 || temp.length()>(8*MAX)){
    cout<<"Customer name must not be empty or more than 40 letters: ";
    getline(cin,temp);
  }
  name=temp;



}
 
string Customer::getName() const{
  return name;
}

void Customer::setAddress(){
  cout<<"Customer Address: ";
  address=setAddrString();
  
}

string Customer::getAddress() const{
  return address;
}
void Customer::setAccountdate(){
  cout<<"Account Date: ";
  accountdate.set();
}

Date Customer::getAccountdate() const{
  return accountdate;
}
























[haj@f431-02 cfiles]$ cat customerList.h
#ifndef _customerList_h
#define _customerList_h

#include <map>
#include <string>
#include <iostream>
#include "utility.h"
#include "customer.h"

class TransactionList;


typedef map<string, Customer> Bag; 
typedef map<string, Customer>::const_iterator itr;
typedef map<string, Customer>::iterator CHAitr;
typedef Bag::value_type val;


class CustomerList{
 public:
  void set();
  bool insert(const Customer& cus);
  void display(string str="ALL",bool shortform=true);
  void remove(string csId);
  itr find(string csId)const;
  void read(ifstream& f);
  void write(ofstream& f)const;
  bool isEmpty()const;
  bool isInList(Customer& cus);
  bool isInList(const string& csId)const;
  Customer operator[](const string&)const;
  string findid(const string&)const;
  void setAcctBalance(const TransactionList&,string strid="ALL");
  
 private:
  Bag b;
  
};

#endif






[haj@f431-02 cfiles]$ cat custoemrlist        omerlist.cc
#include "customerList.h"
#include "transactionList.h"

void CustomerList::setAcctBalance(const TransactionList& tl1,string strid){
  if (strid=="ALL"){
    for(CHAitr i=b.begin();i!=b.end();i++){
      /* using the power of friend .Thats cool!*/
      i->second.accountBalance = tl1.accountTotal(i->first);
    }
  }else
    b[strid].accountBalance =tl1.accountTotal(strid);
}



string CustomerList::findid(const string& info)const{
  int n=info.length();
  for(itr i = b.begin(); i != b.end(); ++i) {
    /* I think compare is better than find because the 
       matching will be with the begining of the word 
       which is how the databases being search usually right?*/
    if ((*i).second.getName().compare(info,0,n)==0){
      cout<<"Name: "<< (*i).second.getName() <<'\t';
      cout <<"ID: "<< (*i).second.getCustomerId()<<"? " ;
      if (yes())
	return (*i).second.getCustomerId();
    }
  }
  return "not found";
	  
}

Customer CustomerList::operator[](const string& strid)const{

  Customer cus;
  if (isInList(strid)){
    for(itr i = b.begin(); i != b.end(); ++i) {
      if ((*i).second.getCustomerId()==strid)
	return (*i).second;
    }
  }
  return cus;
}


void CustomerList::set(){
  Customer cs1;
  do{
    cs1.set();
    cout<<"---------------\n";
    insert(cs1);
    cout<<"Another customer (Y/N)?";
  }while(yes());
}


bool CustomerList::insert(const Customer& cus){
  
  string str1;
  str1=cus.getCustomerId();
   
  
  if (b.find(str1)==b.end()){
    b.insert(val(str1,cus));
    cout<<"Not in list yet ....\n";
    b[str1].display(0);
    cout<<"map size so far is: "<<b.size()<<endl;
    return true;
  }else {
    cout<<"CustomerID "<<str1<<" is already in use:\n";
    b[str1].display();
    cout<<"OK to replace (Y/N)?";
    if (yes()){
      b[str1]=cus;
      cout<<"map size so far is: "<<b.size()<<endl;
      return true;
    }else
      return false; 
  }
  
}



void CustomerList::display(string str,bool shortform){
  Customer cs1,i;
  if (str=="ALL"){
    for(itr i = b.begin(); i != b.end(); ++i) {
      (*i).second.display(shortform);
      cout<<"-----------------\n";
    }
  }else {
    if (b.find(str)!=b.end()){  
      cs1=b[str]; 
      cs1.display(shortform);
    }
  }
}


void CustomerList::remove(string csId){
  
  b.erase(b.find(csId)); //b.erase(csId) doesnt work?
}


itr CustomerList::find(string csId)const{
  return b.find(csId);
}


void CustomerList::read(ifstream& f){
  Customer cs1;
  int i;
  int s;
  string str; 
  f>>s;
  getline(f,str);
  for(i=1;i<=s;i++) {
    cs1.read(f);
    b[cs1.getCustomerId()]=cs1;
  }
}


void CustomerList::write(ofstream& f)const{
  f<<b.size()<<seperater;
  for(itr i = b.begin(); i != b.end(); ++i) {
    (*i).second.write(f);
  }    

}

bool CustomerList::isEmpty()const{
  return b.empty();
}


bool CustomerList::isInList(Customer& cus){
  return  isInList(cus.getCustomerId());
}


bool CustomerList::isInList(const string& csId)const{
  return b.count(csId);
}














[haj@f431-02 cfiles]$ cat transactionList.h
#ifndef _transactionList_h
#define _transactionList_h
#include <map>
#include <string>
#include "transaction.h"

typedef multimap<string,Transaction*> MMap;
typedef multimap<string,Transaction*>::iterator MIt;
typedef multimap<string,Transaction*>::const_iterator CONMIt;


class TransactionList{
 public:
  TransactionList(){}
  TransactionList(const TransactionList&);
  ~TransactionList(){clear();}
  TransactionList& operator=(const TransactionList&);
  void clear();
  void set(const CustomerList&);
  void display(CustomerList&,string strid="ALL",bool shortform =true
	       )const;
  void remove(string strid);
  double accountTotal(string strid)const;
  void write(ofstream&)const;
  void read(ifstream&);
  bool isEmpty()const;
  int transCount(string strid)const;
  void insert(Transaction* ptr);
  bool isInList(string);

 private:
  MMap mm;
  



};



#endif





[haj@f431-02 cfiles]$ cat tarnsactionlist.cc
cat: tarnsactionlist.cc: No such file or directory
[haj@f431-02 cfiles]$ cat transactionlist.cc
#include "transactionList.h"

void TransactionList::clear(){
  for(MIt y=mm.begin();y!=mm.end();y++)
    delete y->second;
}

void TransactionList::insert(Transaction* ptr){
  mm.insert(make_pair(string(ptr->gettcustomerid()),
		     TransactionFactory::create(ptr)));
}

TransactionList::TransactionList(const TransactionList& trl){
  mm=trl.mm;
  /* this is not a shallow copy . the assignment op will take 
     care of business*/
}
  
TransactionList& TransactionList::operator=(const TransactionList& trl){
  clear();
  for(CONMIt y=trl.mm.begin();y!=trl.mm.end();y++)
    mm.insert(make_pair(string(y->first),y->second->clone()));
  return (*this);
}  



void TransactionList::set(const CustomerList& cusl){
  Transaction* ptr;
  do {
    ptr=TransactionFactory::create(cusl);
    insert(ptr);
    cout<<"Another Transaction (Y/N)? ";
  }while(yes());

}

void TransactionList::display(CustomerList& cusl,string strid,
			      bool shortform)const{
  
  if(strid=="ALL"){
    for(CONMIt y=mm.begin(); y != mm.end(); y++){
      if (!shortform) cusl.display(y->first);
      y->second->display();
      cout<<"----------------------\n";
    }
  }else{ 
    for(CONMIt y=mm.begin(); y != mm.end(); y++){
      if (!shortform) cusl.display(y->first);
      if (y->second->gettcustomerid()==strid)
	y->second->display();
      cout<<"----------------------\n";
    }
  }
}


bool TransactionList::isInList(string strid){
  for(CONMIt y=mm.begin();y!=mm.end();y++){
    if (y->first==strid)
      return true;
  }
  return false;
}

 
void TransactionList::remove(string strid){
  MIt t1;
  for(MIt y=mm.begin(); y != mm.end(); y++){
    if (y->first==strid){
      y->second->display();
      cout<<"Delete this transaction(Y/N)? ";
      if (yes()){
	delete y->second;
	t1=y;
	mm.erase(y);
	y=t1;
      }else
	cout<<"Transaction not deleted\n";
      cout<<"Another deletion(Y/N)?  ";
      if (!yes()) break;
    }
  }
  
}

double TransactionList::accountTotal(string strid)const{
  double z=0;
  for(CONMIt y=mm.begin(); y != mm.end(); y++){
    if (y->first==strid)
      z+=(y->second->gettamount());
  }
  return z;
}

void TransactionList::write(ofstream& f)const{
  f<<mm.size()<<endl;
  for(CONMIt y=mm.begin(); y != mm.end(); y++){
    y->second->write(f);
  }
}


void TransactionList::read(ifstream& f){
  int temp,n,l;
  Transaction* ptr;
  f>>temp;
  for(n=1;n<=temp;n++){
    f>>l>>ws;
    ptr=TransactionFactory::create(l);
    ptr->read(f);
    insert(ptr);
    delete ptr;
  }
}

bool TransactionList::isEmpty()const{
  return mm.size();
}

int TransactionList::transCount(string strid)const{
  int counter=0;
  for(CONMIt y=mm.begin(); y != mm.end(); y++){
    if (y->first==strid)
      counter++;
  }
  return counter;
}










[haj@f431-02 cfiles]$ g++ -ansi -Wall -P pedantic *.cc
[haj@f431-02 cfiles]$ a.out
First we read the CustomerList from an existing file.
Name of the file to be read:  data
Reading file data ...
==================================================
Now we read the TransactionList from an existing file.
Name of the file to be read:  hw7TLfile
Reading file hw7TLfile ...
The contents of the CustomerList: 
Id ,Name: 11111, first customer
Account Date:  August 1, 2000
Account Balance: $18.00
Address:  (222)333-4444
Phone: 123 Line1 Street; Line2 Apartment 3; Boston; MA; 12313
Service Type: Dialup	Daily Rate: $0.60
Web space Limit: 10 MB
-----------------
Id ,Name: 22222, second customer
Account Date:  November 1, 1999
Account Balance: $953.40
Address:  (111)444-2222
Phone: 333 Addrline1 Street; Suite Sue; Cambridge; MA; 02020
Service Type: DSL	Daily Rate: $1.20
installation Fee: $150.00
Number of fixed IP addresses: 12
-----------------
Id ,Name: 33333, third in list
Account Date:  February 1, 2001
Account Balance: $297.00
Address:  (393)939-3939
Phone: 222 Any Street; some department; mudville; CT; 04400
Service Type: DSL	Daily Rate: $1.10
installation Fee: $100.00
Number of fixed IP addresses: 9
-----------------
Id ,Name: 53535, fourth on board
Account Date:  November 1, 2000
Account Balance: $100.00
Address:  (234)234-9873
Phone: 3833 Some Avenue; Executive office; Somertime; NY; 12312
Service Type: Dialup	Daily Rate: $0.70
Web space Limit: 12 MB
-----------------
==================================================
The contents of the TransactionList: 
Id ,Name: 11111, first customer
Account Date:  8/1/2000
11111	5/1/2001	Monthly Use Charge	$18.00
Usage fee for period 4/1/2001 - 5/1/2001: $18.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	5/1/2001	Monthly Use Charge	$446.40
Usage fee for period 3/1/2001 - 4/1/2001: $446.40
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	6/1/2001	Monthly Use Charge	$432.00
Usage fee for period 4/1/2001 - 5/1/2001: $432.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	6/15/2001	Extra Service Fee	$100.00
Service Date: 6/2/2001
Service Description: Remove cat hair from modem.
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	4/15/2001	Payment amount: $-25.00
----------------------
Id ,Name: 33333, third in list
Account Date:  2/1/2001
33333	7/1/2001	Monthly Use Charge	$297.00
Usage fee for period 6/1/2001 - 7/1/2001: $297.00
----------------------
Id ,Name: 53535, fourth on board
Account Date:  11/1/2000
53535	11/1/2001	Extra Service Fee	$100.00
Service Date: 10/14/2001
Service Description: Add ethernet ports.
----------------------
==================================================
Now we obtain some more transactions.
Please enter the type of transaction:
0	Monthly Use Charge
1	Extra Service Fee
2	Late Fee
3	Payment
Enter Transaction Type : 0
Enter the first few characters of the customer's name: f
Name: first customer	ID: 11111? y
Enter the transaction date. 
Year: 100^H^H       2000
Month (a number from 1 to 12): 3
Day of the month: 2
Enter the start date of this billing period :Year: 2001
Month (a number from 1 to 12): 2
Day of the month: 3
Enter the end date for this billing period: Year: 2003
Month (a number from 1 to 12): 2
Day of the month: 2
Another Transaction (Y/N)? y
Please enter the type of transaction:
0	Monthly Use Charge
1	Extra Service Fee
2	Late Fee
3	Payment
Enter Transaction Type : 1
Enter the first few characters of the customer's name: s
Name: second customer	ID: 22222? y
Enter the transaction date. 
Year: 2003
Month (a number from 1 to 12): 3
Day of the month: 2
Enter the charge for this extra service: 1^H   43
Enter the date of this extra service: Year: 2
Year must not be earlier than 1000. Please try again.
Year: 2222^H^H        2000
Month (a number from 1 to 12): 4
Day of the month: 3
Enter a brief description of the service:you just pau^H   y more
Another Transaction (Y/N)? y
Please enter the type of transaction:
0	Monthly Use Charge
1	Extra Service Fee
2	Late Fee
3	Payment
Enter Transaction Type : 3
Enter the first few characters of the customer's name: f
Name: first customer	ID: 11111? n
Name: fourth on board	ID: 53535? y
Enter the transaction date. 
Year: 2000
Month (a number from 1 to 12): 3
Day of the month: 5
Enter the payment amount: 1000
Transaction amount set to $-1000.00
Another Transaction (Y/N)? n
The contents of the TransactionList: 
Id ,Name: 11111, first customer
Account Date:  8/1/2000
11111	5/1/2001	Monthly Use Charge	$18.00
Usage fee for period 4/1/2001 - 5/1/2001: $18.00
----------------------
Id ,Name: 11111, first customer
Account Date:  8/1/2000
11111	3/2/2000	Monthly Use Charge	$437.40
Usage fee for period 2/3/2001 - 2/2/2003: $437.40
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	5/1/2001	Monthly Use Charge	$446.40
Usage fee for period 3/1/2001 - 4/1/2001: $446.40
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	6/1/2001	Monthly Use Charge	$432.00
Usage fee for period 4/1/2001 - 5/1/2001: $432.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	6/15/2001	Extra Service Fee	$100.00
Service Date: 6/2/2001
Service Description: Remove cat hair from modem.
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	4/15/2001	Payment amount: $-25.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	3/2/2003	Extra Service Fee	$43.00
Service Date: 4/3/2000
Service Description: you just pay more
----------------------
Id ,Name: 33333, third in list
Account Date:  2/1/2001
33333	7/1/2001	Monthly Use Charge	$297.00
Usage fee for period 6/1/2001 - 7/1/2001: $297.00
----------------------
Id ,Name: 53535, fourth on board
Account Date:  11/1/2000
53535	11/1/2001	Extra Service Fee	$100.00
Service Date: 10/14/2001
Service Description: Add ethernet ports.
----------------------
Id ,Name: 53535, fourth on board
Account Date:  11/1/2000
53535	3/5/2000	Payment amount: $-1000.00
----------------------
==================================================
Now we test the TransactionList::remove() function.
Enter the customer ID for removing transactions: 11111
11111	5/1/2001	Monthly Use Charge	$18.00
Usage fee for period 4/1/2001 - 5/1/2001: $18.00
Delete this transaction(Y/N)? n
Transaction not deleted
Another deletion(Y/N)?  y
11111	3/2/2000	Monthly Use Charge	$437.40
Usage fee for period 2/3/2001 - 2/2/2003: $437.40
Delete this transaction(Y/N)? y
Another deletion(Y/N)?  y
Another customer ID (y/n)? y
Enter the customer ID for removing transactions: 22222
22222	5/1/2001	Monthly Use Charge	$446.40
Usage fee for period 3/1/2001 - 4/1/2001: $446.40
Delete this transaction(Y/N)? y
Another deletion(Y/N)?  y
22222	6/1/2001	Monthly Use Charge	$432.00
Usage fee for period 4/1/2001 - 5/1/2001: $432.00
Delete this transaction(Y/N)? n
Transaction not deleted
Another deletion(Y/N)?  y
22222	6/15/2001	Extra Service Fee	$100.00
Service Date: 6/2/2001
Service Description: Remove cat hair from modem.
Delete this transaction(Y/N)? y
Another deletion(Y/N)?  y
22222	4/15/2001	Payment amount: $-25.00
Delete this transaction(Y/N)? n
Transaction not deleted
Another deletion(Y/N)?  y
22222	3/2/2003	Extra Service Fee	$43.00
Service Date: 4/3/2000
Service Description: you just pay more
Delete this transaction(Y/N)? y
Another deletion(Y/N)?  y
Another customer ID (y/n)? 3333
The contents of the TransactionList: 
Id ,Name: 11111, first customer
Account Date:  8/1/2000
11111	5/1/2001	Monthly Use Charge	$18.00
Usage fee for period 4/1/2001 - 5/1/2001: $18.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	6/1/2001	Monthly Use Charge	$432.00
Usage fee for period 4/1/2001 - 5/1/2001: $432.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	4/15/2001	Payment amount: $-25.00
----------------------
Id ,Name: 33333, third in list
Account Date:  2/1/2001
33333	7/1/2001	Monthly Use Charge	$297.00
Usage fee for period 6/1/2001 - 7/1/2001: $297.00
----------------------
Id ,Name: 53535, fourth on board
Account Date:  11/1/2000
53535	11/1/2001	Extra Service Fee	$100.00
Service Date: 10/14/2001
Service Description: Add ethernet ports.
----------------------
Id ,Name: 53535, fourth on board
Account Date:  11/1/2000
53535	3/5/2000	Payment amount: $-1000.00
----------------------
==================================================
The contents of the CustomerList: 
Id ,Name: 11111, first customer
Account Date:  August 1, 2000
Account Balance: $18.00
Address:  (222)333-4444
Phone: 123 Line1 Street; Line2 Apartment 3; Boston; MA; 12313
Service Type: Dialup	Daily Rate: $0.60
Web space Limit: 10 MB
-----------------
Id ,Name: 22222, second customer
Account Date:  November 1, 1999
Account Balance: $953.40
Address:  (111)444-2222
Phone: 333 Addrline1 Street; Suite Sue; Cambridge; MA; 02020
Service Type: DSL	Daily Rate: $1.20
installation Fee: $150.00
Number of fixed IP addresses: 12
-----------------
Id ,Name: 33333, third in list
Account Date:  February 1, 2001
Account Balance: $297.00
Address:  (393)939-3939
Phone: 222 Any Street; some department; mudville; CT; 04400
Service Type: DSL	Daily Rate: $1.10
installation Fee: $100.00
Number of fixed IP addresses: 9
-----------------
Id ,Name: 53535, fourth on board
Account Date:  November 1, 2000
Account Balance: $100.00
Address:  (234)234-9873
Phone: 3833 Some Avenue; Executive office; Somertime; NY; 12312
Service Type: Dialup	Daily Rate: $0.70
Web space Limit: 12 MB
-----------------
==================================================
Now we save the transactions to a file.
Please enter the file name for saving this data: maan
File already exists ... Ok to overwrite (y/n)? 
y
Writing to file maan ...
[haj@f431-02 cfiles]$ cat maan
6
0
11111
365729
18
365699
365729
0
22222
365760
432
365699
365729
3
22222
365713
-25
0
33333
365790
297
365760
365790
1
53535
365913
100
365895
Add ethernet ports.
3
53535
365307
-1000
[haj@f431-02 cfiles]$ a.out
First we read the CustomerList from an existing file.
Name of the file to be read:  dta^H^H      ata
Reading file data ...
==================================================
Now we read the TransactionList from an existing file.
Name of the file to be read:  maan
Reading file maan ...
The contents of the CustomerList: 
Id ,Name: 11111, first customer
Account Date:  August 1, 2000
Account Balance: $18.00
Address:  (222)333-4444
Phone: 123 Line1 Street; Line2 Apartment 3; Boston; MA; 12313
Service Type: Dialup	Daily Rate: $0.60
Web space Limit: 10 MB
-----------------
Id ,Name: 22222, second customer
Account Date:  November 1, 1999
Account Balance: $407.00
Address:  (111)444-2222
Phone: 333 Addrline1 Street; Suite Sue; Cambridge; MA; 02020
Service Type: DSL	Daily Rate: $1.20
installation Fee: $150.00
Number of fixed IP addresses: 12
-----------------
Id ,Name: 33333, third in list
Account Date:  February 1, 2001
Account Balance: $297.00
Address:  (393)939-3939
Phone: 222 Any Street; some department; mudville; CT; 04400
Service Type: DSL	Daily Rate: $1.10
installation Fee: $100.00
Number of fixed IP addresses: 9
-----------------
Id ,Name: 53535, fourth on board
Account Date:  November 1, 2000
Account Balance: $-900.00
Address:  (234)234-9873
Phone: 3833 Some Avenue; Executive office; Somertime; NY; 12312
Service Type: Dialup	Daily Rate: $0.70
Web space Limit: 12 MB
-----------------
==================================================
The contents of the TransactionList: 
Id ,Name: 11111, first customer
Account Date:  8/1/2000
11111	5/1/2001	Monthly Use Charge	$18.00
Usage fee for period 4/1/2001 - 5/1/2001: $18.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	6/1/2001	Monthly Use Charge	$432.00
Usage fee for period 4/1/2001 - 5/1/2001: $432.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	4/15/2001	Payment amount: $-25.00
----------------------
Id ,Name: 33333, third in list
Account Date:  2/1/2001
33333	7/1/2001	Monthly Use Charge	$297.00
Usage fee for period 6/1/2001 - 7/1/2001: $297.00
----------------------
Id ,Name: 53535, fourth on board
Account Date:  11/1/2000
53535	11/1/2001	Extra Service Fee	$100.00
Service Date: 10/14/2001
Service Description: Add ethernet ports.
----------------------
Id ,Name: 53535, fourth on board
Account Date:  11/1/2000
53535	3/5/2000	Payment amount: $-1000.00
----------------------
==================================================
Now we obtain some more transactions.
Please enter the type of transaction:
0	Monthly Use Charge
1	Extra Service Fee
2	Late Fee
3	Payment
Enter Transaction Type : 2
Enter the first few characters of the customer's name: s
Name: second customer	ID: 22222? y
Enter the transaction date. 
Year: 2000
Month (a number from 1 to 12): 3
Day of the month: 2
Enter the due date :Year: 2003
Month (a number from 1 to 12): 4
Day of the month: 3
Transaction amout set to $25.00
Another Transaction (Y/N)? y
Please enter the type of transaction:
0	Monthly Use Charge
1	Extra Service Fee
2	Late Fee
3	Payment
Enter Transaction Type : 2
Enter the first few characters of the customer's name: f
Name: first customer	ID: 11111? n^H   y
Enter the transaction date. 
Year: 2000
Month (a number from 1 to 12): 3
Day of the month: 2
Enter the due date :Year: 20056
Month (a number from 1 to 12): 2
Day of the month: 3
Transaction amout set to $25.00
Another Transaction (Y/N)? y
Please enter the type of transaction:
0	Monthly Use Charge
1	Extra Service Fee
2	Late Fee
3	Payment
Enter Transaction Type : 1
Enter the first few characters of the customer's name: f
Name: first customer	ID: 11111? y
Enter the transaction date. 
Year: 2003
Month (a number from 1 to 12): 4
Day of the month: 3
Enter the charge for this extra service: 56
Enter the date of this extra service: Year: 33^H    2005
Month (a number from 1 to 12): 2
Day of the month: 3
Enter a brief description of the service:free duck with each call.
Another Transaction (Y/N)? n^H   y
Please enter the type of transaction:
0	Monthly Use Charge
1	Extra Service Fee
2	Late Fee
3	Payment
Enter Transaction Type : 3
Enter the first few characters of the customer's name: f
Name: first customer	ID: 11111? y
Enter the transaction date. 
Year: 2004
Month (a number from 1 to 12): 2
Day of the month: 3
Enter the payment amount: 1980
Transaction amount set to $-1980.00
Another Transaction (Y/N)? y
Please enter the type of transaction:
0	Monthly Use Charge
1	Extra Service Fee
2	Late Fee
3	Payment
Enter Transaction Type : 2
Enter the first few characters of the customer's name: s
Name: second customer	ID: 22222? y
Enter the transaction date. 
Year: 10  2009
Month (a number from 1 to 12): 3
Day of the month: 2
Enter the due date :Year: 2006
Month (a number from 1 to 12): 3
Day of the month: 4
Transaction amout set to $25.00
Another Transaction (Y/N)? n
The contents of the TransactionList: 
Id ,Name: 11111, first customer
Account Date:  8/1/2000
11111	5/1/2001	Monthly Use Charge	$18.00
Usage fee for period 4/1/2001 - 5/1/2001: $18.00
----------------------
Id ,Name: 11111, first customer
Account Date:  8/1/2000
11111	3/2/2000	Late Fee	$25.00
Due Date: 2/3/20056	Late Fee:  $25.00
----------------------
Id ,Name: 11111, first customer
Account Date:  8/1/2000
11111	4/3/2003	Extra Service Fee	$56.00
Service Date: 2/3/2005
Service Description: free duck with each call.
----------------------
Id ,Name: 11111, first customer
Account Date:  8/1/2000
11111	2/3/2004	Payment amount: $-1980.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	6/1/2001	Monthly Use Charge	$432.00
Usage fee for period 4/1/2001 - 5/1/2001: $432.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	4/15/2001	Payment amount: $-25.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	3/2/2000	Late Fee	$25.00
Due Date: 4/3/2003	Late Fee:  $25.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	3/2/2009	Late Fee	$25.00
Due Date: 3/4/2006	Late Fee:  $25.00
----------------------
Id ,Name: 33333, third in list
Account Date:  2/1/2001
33333	7/1/2001	Monthly Use Charge	$297.00
Usage fee for period 6/1/2001 - 7/1/2001: $297.00
----------------------
Id ,Name: 53535, fourth on board
Account Date:  11/1/2000
53535	11/1/2001	Extra Service Fee	$100.00
Service Date: 10/14/2001
Service Description: Add ethernet ports.
----------------------
Id ,Name: 53535, fourth on board
Account Date:  11/1/2000
53535	3/5/2000	Payment amount: $-1000.00
----------------------
==================================================
Now we test the TransactionList::remove() function.
Enter the customer ID for removing transactions: 11111
11111	5/1/2001	Monthly Use Charge	$18.00
Usage fee for period 4/1/2001 - 5/1/2001: $18.00
Delete this transaction(Y/N)? y
Another deletion(Y/N)?  y
11111	4/3/2003	Extra Service Fee	$56.00
Service Date: 2/3/2005
Service Description: free duck with each call.
Delete this transaction(Y/N)? y
Another deletion(Y/N)?  y
11111	2/3/2004	Payment amount: $-1980.00
Delete this transaction(Y/N)? y
Another deletion(Y/N)?  n
Another customer ID (y/n)? y
Enter the customer ID for removing transactions: 53535
53535	11/1/2001	Extra Service Fee	$100.00
Service Date: 10/14/2001
Service Description: Add ethernet ports.
Delete this transaction(Y/N)? y
Another deletion(Y/N)?  y
53535	3/5/2000	Payment amount: $-1000.00
Delete this transaction(Y/N)? n
Transaction not deleted
Another deletion(Y/N)?  n
Another customer ID (y/n)? y
Enter the customer ID for removing transactions: 33333
33333	7/1/2001	Monthly Use Charge	$297.00
Usage fee for period 6/1/2001 - 7/1/2001: $297.00
Delete this transaction(Y/N)? y
Another deletion(Y/N)?  n
Another customer ID (y/n)? n
The contents of the TransactionList: 
Id ,Name: 11111, first customer
Account Date:  8/1/2000
11111	3/2/2000	Late Fee	$25.00
Due Date: 2/3/20056	Late Fee:  $25.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	6/1/2001	Monthly Use Charge	$432.00
Usage fee for period 4/1/2001 - 5/1/2001: $432.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	4/15/2001	Payment amount: $-25.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	3/2/2000	Late Fee	$25.00
Due Date: 4/3/2003	Late Fee:  $25.00
----------------------
Id ,Name: 22222, second customer
Account Date:  11/1/1999
22222	3/2/2009	Late Fee	$25.00
Due Date: 3/4/2006	Late Fee:  $25.00
----------------------
Id ,Name: 53535, fourth on board
Account Date:  11/1/2000
53535	3/5/2000	Payment amount: $-1000.00
----------------------
==================================================
The contents of the CustomerList: 
Id ,Name: 11111, first customer
Account Date:  August 1, 2000
Account Balance: $18.00
Address:  (222)333-4444
Phone: 123 Line1 Street; Line2 Apartment 3; Boston; MA; 12313
Service Type: Dialup	Daily Rate: $0.60
Web space Limit: 10 MB
-----------------
Id ,Name: 22222, second customer
Account Date:  November 1, 1999
Account Balance: $407.00
Address:  (111)444-2222
Phone: 333 Addrline1 Street; Suite Sue; Cambridge; MA; 02020
Service Type: DSL	Daily Rate: $1.20
installation Fee: $150.00
Number of fixed IP addresses: 12
-----------------
Id ,Name: 33333, third in list
Account Date:  February 1, 2001
Account Balance: $297.00
Address:  (393)939-3939
Phone: 222 Any Street; some department; mudville; CT; 04400
Service Type: DSL	Daily Rate: $1.10
installation Fee: $100.00
Number of fixed IP addresses: 9
-----------------
Id ,Name: 53535, fourth on board
Account Date:  November 1, 2000
Account Balance: $-900.00
Address:  (234)234-9873
Phone: 3833 Some Avenue; Executive office; Somertime; NY; 12312
Service Type: Dialup	Daily Rate: $0.70
Web space Limit: 12 MB
-----------------
==================================================
Now we save the transactions to a file.
Please enter the file name for saving this data: maan
File already exists ... Ok to overwrite (y/n)? 
y
Writing to file maan ...
[haj@f431-02 cfiles]$ exit
exit

Script done on Sat Nov 17 18:07:47 2001
